// Code generated by mockery v1.0.0. DO NOT EDIT.

package elasticsearch

import (
	"context"

	"github.com/olivere/elastic/v7"
	"github.com/stretchr/testify/mock"
)

// mockBulkService is an autogenerated mock type for the bulkService type
type mockBulkService struct {
	mock.Mock
}

// Add provides a mock function with given fields: requests
func (_m *mockBulkService) Add(requests ...elastic.BulkableRequest) *elastic.BulkService {
	_va := make([]interface{}, len(requests))
	for _i := range requests {
		_va[_i] = requests[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *elastic.BulkService
	if rf, ok := ret.Get(0).(func(...elastic.BulkableRequest) *elastic.BulkService); ok {
		r0 = rf(requests...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.BulkService)
		}
	}

	return r0
}

// Do provides a mock function with given fields: ctx
func (_m *mockBulkService) Do(ctx context.Context) (*elastic.BulkResponse, error) {
	ret := _m.Called(ctx)

	var r0 *elastic.BulkResponse
	if rf, ok := ret.Get(0).(func(context.Context) *elastic.BulkResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.BulkResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NumberOfActions provides a mock function with given fields:
func (_m *mockBulkService) NumberOfActions() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Timeout provides a mock function with given fields: timeout
func (_m *mockBulkService) Timeout(timeout string) *elastic.BulkService {
	ret := _m.Called(timeout)

	var r0 *elastic.BulkService
	if rf, ok := ret.Get(0).(func(string) *elastic.BulkService); ok {
		r0 = rf(timeout)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elastic.BulkService)
		}
	}

	return r0
}
